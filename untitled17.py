# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-sE9SuRWeVvHdWEB4WbUsaNCrY-L6nnX
"""

# y=mx+b .....(1)

# loss w.r.t mean squared error

# l=1/n * (y_actual -y_predicted)**2 ....(2) # here n= number of features

# l=1/1 * (y-(mxi+bi))**2

# L=(y-mxi-bi)**2 ....(3)

# Loss w.r.t. intercept(b)

# dL/db=2(y-mxi-bi)[dy/db-dmxi/db-dbi/db]
# dL/dm=2(y-mxi-bi)[0-xi-0]
# dL/dm=-2(y-mxi-bi)(xi) ........(5)

# b-new=b_old-learning_rate * dL/db ......(6)
# m_new=mm_old-learning_rate * dL/dm .....(7)

#20-(-150)=170===>zig-zag situation ====>Gradient Exploading ==>
# problem solution=learning_rate(0.01)

from sklearn.datasets import make_regression
import numpy as np

x,y=make_regression(n_samples=4,n_features=1,n_informative=1,n_targets=1,noise=80,random_state=13)

import matplotlib.pyplot as plt
plt.scatter(x,y)

from sklearn.linear_model import LinearRegression

reg=LinearRegression()

reg.fit(x,y)

LinearRegression(copy_X=True,fit_intercept=True,n_jobs=None)

reg.coef_

reg.intercept_

plt.scatter(x,y)
plt.plot(x,reg.predict(x),color='red')

y_pred=((78.35*x)+0).reshape(4)

plt.scatter(x,y)
plt.plot(x,reg.predict(x),color='red',label='ols')
plt.plot(x,y_pred,color="green",label='b=0')
plt.legend()
plt.show()

import numpy as np
arr=np.array([[1,2,3],[4,5,6]])
flattened_arr=arr.ravel()
print(arr)
print(flattened_arr)

m=78.35
b=0
loss_slope=-2*np.sum(y-m*x.ravel()-b)
loss_slope

lr=0.1
step_size=loss_slope*lr
step_size

b=b-step_size
b

y_pred=((78.35*x+b).reshape(4))
plt.scatter(x,y)
plt.plot(x,reg.predict(x),color='black',label='ols')
plt.plot(x,y_pred1,color='red',label='b={}'.formt(b))
plt.plot(x,y_pred,color='yellow',label='b-=0')
plt.plot